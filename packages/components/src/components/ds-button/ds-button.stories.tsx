import { expect, userEvent, within } from '@storybook/test';
import { Meta, StoryObj } from '@storybook/web-components';
import { within as shadowWithin } from 'shadow-dom-testing-library';

import type { DsButton } from './ds-button';

// DsButton Component Stories.
const DsButtonMeta = {
  title: 'Components/DsButton',
  component: 'ds-button',
  argTypes: {},
  args: {
    text: 'Hello, World!',
  },
  /* SEE: https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
   * to learn more about using the canvasElement to query the DOM
   */
  play: async ({ canvasElement, step }) => {
    const canvas = within(canvasElement);

    // STEP: 1
    await step('Does canvas exist', async () => {
      await expect(canvas).not.toBeNull();
      await expect(canvas).toBeTruthy();
    });

    // STEP: 2
    await step('Does component exist', async () => {
      // The waitFor method is used to run setup code before running the actual interactions
      const components = document.getElementsByTagName('ds-button');
      const component = components[0];
      expect(component).toBeInTheDocument();
      // Create reference to an element in the Story
      const actionComponent = document.getElementById('ds-button');
      // userEvent functions allow you to trigger interactions
      userEvent.click(actionComponent);
    });

    // STEP: 3
    await step('Does ds-button live in shadowDom', async () => {
      // get a shadowDom from the canvasElement generated by Storybook
      const shadow = shadowWithin(canvasElement);
      // get the ds-button from within the shadowroot with `queryBy`
      const shadowComponent = await shadow.findByShadowRole('button'); // Edit role
      // test the ds-button exists
      expect(shadowComponent).toBeTruthy();
    });
  },
} satisfies Meta<DsButton>;

export default DsButtonMeta;

/* SEE: https://storybook.js.org/docs/api/csf#named-story-exports */
export const Primary = {} satisfies StoryObj<typeof DsButtonMeta>;
